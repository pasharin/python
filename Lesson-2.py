# Задача-1:
# Дан список фруктов.
# Напишите программу, выводящую фрукты в виде нумерованного списка,
# выровненного по правой стороне.

# Пример:
# Дано: ["яблоко", "банан", "киви", "арбуз"]
# Вывод:
# 1. яблоко
# 2.  банан
# 3.   киви
# 4.  арбуз

# Подсказка: воспользоваться методом .format()

Фрукты = ['Яблоко', 'Банан', 'Киви', 'Арбуз']
name = len(Фрукты)
for i in range(name):
    print(str(i + 1) + '.' + '{}'.format(Фрукты[i]))


# Задача-2:
# Даны два произвольные списка.
# Удалите из первого списка элементы, присутствующие во втором списке.


one_list = [1, 2, 3, 4, 5]
print(one_list)
two_list = [2, 3, 4, 5, 6, 7, 8]
print(two_list)
for item in two_list:
    if item in one_list:
        one_list.remove(item)
print(one_list)


# Задача-3:
# Дан произвольный список из целых чисел.
# Получите НОВЫЙ список из элементов исходного, выполнив следующие условия:
# если элемент кратен двум, то разделить его на 4, если не кратен, то умножить на два.


first_list = [2, 8, 12, 23, 24, 30]
second_list = []
last_name = len(first_list)
for i in range(last_name):
    if first_list[i] % 2 == 0:
        second_list.append(first_list[i] / 4)
else:
    second_list.append(first_list[i] * 2)
print(second_list)


# Задача-1:
# Дан список, заполненный произвольными целыми числами, получите новый список,
# элементами которого будут квадратные корни элементов исходного списка,
# но только если результаты извлечения корня не имеют десятичной части и
# если такой корень вообще можно извлечь
# Пример: Дано: [2, -5, 8, 9, -25, 25, 4]   Результат: [3, 5, 2]

import math
my_list = [2, -5, 8, 9, -25, 25, 4]
new_list = []
for item in my_list:
    if item > 0 and math.sqrt(item) % 1 == 0:
        new_list.append(int(math.sqrt(item)))
print(new_list)


# Задача-2: Дана дата в формате dd.mm.yyyy, например: 02.11.2013.
# Ваша задача вывести дату в текстовом виде, например: второе ноября 2013 года.
# Склонением пренебречь (2000 года, 2010 года)

dana_data = '02.11.2013'
data_list = dana_data.split('.')
dict_months = {
'01': 'января',
'02': 'феврал',
'03': 'марта',
'04': 'апреля',
'05': 'мая',
'06': 'июня',
'07': 'июля',
'08': 'августа',
'09': 'сентября',
'10': 'октября',
'11': 'ноября',
'12': 'декабря',
}
dict_days = {
'01': 'первое', '02': 'второе', '03': 'третье', '04': 'четвёртое', '05': 'пятое',
'06': 'шестое', '07': 'седьмое', '08': 'восьмое', '09': 'девятое', '10': 'десятое',
'11': 'одиннадцатое', '12': 'двенадцатое', '13': 'тринадцатое', '14': 'четырнадцатое', '15': 'пятнадцатое',
'16': 'шестнадцатое', '17': 'семнадцатое', '18': 'восемнадцатое', '19': 'девятнадцатое', '20': 'двадцатое',
'21': 'двадцать первое', '22': 'двадцать второе', '23': 'двадцать третье', '24': 'двадцать четвёртое',
'25': 'двадцать пятое', '26': 'двадцать шестое', '27': 'двадцать седьмое', '28': 'двадцать восьмое',
'29': 'двадцать девятое', '30': 'тридцатое', '31': 'тридцать первое',
}
for key in dict_days:
    if data_list[0] == key:
        data_list[0] = dict_days[key]

for key in dict_months:
    if data_list[1] == key:
        data_list[1] = dict_months[key]

answer_data = data_list[0] + ' ' + data_list[1] + ' ' + data_list[2] + ' ' "года"
print(answer_data)

# Задача-4: Дан список, заполненный произвольными целыми числами.
# Получите новый список, элементами которого будут: 
# а) неповторяющиеся элементы исходного списка:
# например, lst = [1, 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 2, 4, 5, 6]
# б) элементы исходного списка, которые не имеют повторений:
# например, lst = [1 , 2, 4, 5, 6, 2, 5, 2], нужно получить lst2 = [1, 4, 6]

lst = [1, 2, 4, 5, 6, 2, 5, 2]
lst1 = set(lst)
lst1 = list(lst1)
print(lst1)

lst2 = [x for x in lst if not lst.count(x) > 1]
print(lst2)


# Задача-3: Напишите алгоритм, заполняющий список произвольными целыми числами
# в диапазоне от -100 до 100. В списке должно быть n - элементов.
# Подсказка:
# для получения случайного числа используйте функцию randint() модуля random


n = int(input('введите количество случайных элементов в списке: '))
my_list = []
for el in range(n):
    my_list.append(random.randint(-100, 100))
print(my_list)

